{"version":3,"sources":["selectors/selectors.js","utils.js","redux/actions.js","redux/utils/redux-map.js","redux/mutators.js","redux/reducers.js","redux/store.js","components/Notify.js","components/Header.js","components/Player.js","components/Room.js","components/Rooms.js","components/Card.js","components/Cards.js","components/Footer.js","components/App.js","index.js"],"names":["getPlayersInRoom","players","room","playerNames","map","name","getPlayerByName","find","player","getCurrentTurnPlayer","state","currentTurnPlayerIndex","getCurrentTurnPlayerName","currentTurnPlayer","isCurrentTurnPlayer","getRoomForPlayer","rooms","isPlayerInRoom","includes","isCurrentTurnPlayerAbleToSelectRoom","currentTurnPlayerRoom","isCurrentTurnPlayerInRoom","gameOver","emergencyMeetingStarted","human","isImposter","imposterPlayerName","getNextPlayerTurnIndex","nextIndex","length","repeat","times","f","value","nextValue","ArrayUtils","clone","array","allExcept","item","filter","a","pluckRandom","splice","sampleIndex","Math","floor","random","sample","reduceAll","reducers","reduce","newState","reducer","mutatorToReducer","mutator","oldState","action","produce","updatePlayerName","type","addHumanPlayer","dispatch","getState","addPlayerForm","alert","addComputerPlayer","startGame","dispatchNextTurn","onRoomSelected","roomName","computerPlayersEnabled","doComputerPlayer","setTimeout","getAvailableComputerActions","computerActions","randomRoom","reducerMap","this","actionsToReducers","initialState","actionFn","actionName","startState","getReducersForAction","console","log","movePlayersToStartingPositions","distributeCards","n","availableCards","characters","weapons","numPlayers","i","index","playerIndex","card","id","cards","pickWhoDunnit","whoDunnit","character","weapon","movePlayerToRoom","leaveCurrentRoom","newRoom","getRoomByName","playerNameToRemove","forEach","addPlayer","availableCharacters","playerCharacterNames","getPlayerCharacterNames","getAvailableCharacters","size","image","addPlayerMutator","victory","resetCurrentTurnPlayerIndex","moveCurrentPlayerToRoom","showCurrentPlayerNotification","notify","message","className","rootReducer","socket","io","socketIoMiddleware","createSocketIoMiddleware","middlewareEnhancer","applyMiddleware","thunkMiddleware","store","createStore","emergencyMeetingInitiatedByPlayerIndex","voteTalliesByPlayer","computerPlayers","emergencyButton","composeWithDevTools","connect","placeholder","onKeyUp","e","code","onChange","target","onClick","getPlayerClassName","isCurrentTurn","celebrate","ownProps","src","currentTurnPlayerAbleToSelectRoom","App","rootElement","document","getElementById","ReactDOM","render","steps","currentStepIndex","intervalId","setInterval","clearInterval"],"mappings":"oMAQaA,EAAmB,SAACC,EAASC,GAAV,OAAmBA,EAAKC,YAAYC,KAAI,SAAAC,GAAI,OAAIC,EAAgBL,EAASI,OAC5FC,EAAkB,SAACL,EAASI,GAAV,OAAmBJ,EAAQM,MAAK,SAAAC,GAAM,OAAIA,EAAOH,OAASA,MAC5EI,EAAuB,SAACC,GAAD,OAAWA,EAAMT,QAAQS,EAAMC,yBACtDC,EAA2B,SAACF,GACvC,IAAIG,EAAoBJ,EAAqBC,GAC7C,OAAIG,EACKA,EAAkBR,KAElB,MAGES,EAAsB,SAACJ,EAAOF,GAAR,OAAmBI,EAAyBF,KAAWF,EAAOH,MACpFU,EAAmB,SAACL,EAAOF,GACtC,OAAOE,EAAMM,MAAMT,MAAK,SAAAL,GAAI,OAAIe,EAAef,EAAMM,OAE1CS,EAAiB,SAACf,EAAMM,GAAP,OAAkBN,EAAKC,YAAYe,SAASV,EAAOH,OAUpEc,EAAsC,SAACT,EAAOR,GACzD,IAAIW,EAAoBJ,EAAqBC,GAC7C,OAAOG,IAXgC,SAACH,EAAOR,GAC/C,IAAIW,EAAoBJ,EAAqBC,GAC7C,GAAIG,EAAmB,CACrB,IAAIO,EAAwBL,EAAiBL,EAAOG,GACpD,OAAOO,GAAyBA,EAAsBf,OAASH,EAAKG,KAEpE,OAAO,EAMJgB,CAA0BX,EAAOR,KACjCQ,EAAMY,WACNZ,EAAMa,yBACPV,EAAkBW,OAcXC,EAAa,SAACf,EAAOF,GAAR,OAAmBE,EAAMgB,qBAAuBlB,EAAOH,MAGpEsB,EAAyB,SAACjB,GACrC,IAAIkB,EAAYlB,EAAMC,uBAAyB,EAC/C,OAAID,EAAMT,QAAQ4B,SAAWD,EACpB,EAEAA,G,eClDEE,EAAS,SAATA,EAASC,GAAK,OAAI,SAAAC,GAAC,OAAI,SAAAC,GAClC,KAAIF,EAAQ,GAIV,OAAOE,EAHP,IAAIC,EAAYF,EAAEC,GAClBH,EAAOC,EAAQ,EAAfD,CAAkBE,EAAlBF,CAAqBI,MAkBZC,EAAa,CACxBC,MAAO,SAASC,GACd,OAAO,YAAIA,IAEbC,UAAW,SAASD,EAAOE,GACzB,OAAOF,EAAMG,QAAO,SAAAC,GAAC,OAAIA,IAAMF,MAEjCG,YAAa,SAASL,GACpB,OAAqB,IAAjBA,EAAMR,OACD,KAEFQ,EAAMM,OAAOR,EAAWS,YAAYP,GAAQ,GAAG,IAExDO,YAAa,SAASP,GACpB,OAAOQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAMR,SAE1CmB,OAAQ,SAACX,GACP,OAAOA,EAAMF,EAAWS,YAAYP,MAI3BY,EAAY,SAACvC,GAAwB,IAAD,uBAAbwC,EAAa,iCAAbA,EAAa,kBAC/C,OAAOA,EAASC,QAAO,SAACC,EAAUC,GAAX,OAAuBA,EAAQD,KAAW1C,IAGtD4C,EAAmB,SAACC,GAAD,OAAa,SAACC,EAAUC,GAAX,OAAsBC,YAAQF,GAAU,SAAAJ,GAAQ,OAAIG,EAAQH,EAAUK,QChDtGE,EAAmB,SAACtD,GAAD,MAAW,CACzCuD,KAAM,mBACNvD,KAAMA,IAGKwD,EAAiB,kBAAM,SAACC,EAAUC,GAC7C,IAAMrD,EAAQqD,IACkD,MAA5DzD,EAAgBI,EAAMT,QAASS,EAAMsD,cAAc3D,MACrD4D,MAAM,kCAAD,OAAmCvD,EAAMsD,cAAc3D,OAE5DyD,EAAS,CACPF,KAAM,iBACNpD,OAAQ,CACNgB,OAAO,OAMF0C,EAAoB,iBAAO,CACtCN,KAAM,oBACNpD,OAAQ,CACNgB,OAAO,KAME2C,EAAY,kBAAM,SAACL,EAAUC,GACxCD,EAAS,CACPF,KAAM,cAERQ,EAAiBN,EAAUC,KAKhBM,EAAiB,SAACC,GAAD,OAAc,SAACR,EAAUC,GACrDD,EAAS,CACPF,KAAM,iBACNU,aAEFF,EAAiBN,EAAUC,KAMvBK,EAAmB,SAACN,EAAUC,GAClCD,EAxBmC,CACnCF,KAAM,mBAwBN,IAAMlD,EAAQqD,KACCtD,EAAqBC,GACxBc,OAASd,EAAM6D,wBACzBC,EAAiBV,EAAUC,IAIzBS,EAAmB,SAACV,EAAUC,GAClCU,YAAW,WACT,IAAMhB,EAAStB,EAAWa,OAAO0B,EAA4BX,IAC7DD,EAASL,KACR,MAGCiB,EAA8B,SAACX,GACnC,OAAOY,GASHA,EAAkB,CANC,SAACb,EAAUC,GAClC,IAAMrD,EAAQqD,IACRa,EAAazC,EAAWa,OAAOtC,EAAMM,OAC3C8C,EAASO,EAAeO,EAAWvE,S,gBChD/BwE,EAAa,IAhCnB,WACE,aAAe,oBACbC,KAAKC,kBAAoB,GACzBD,KAAKE,aAAe,GAHxB,gDAMMC,EAAU5B,GACZ,IAAI6B,EAAkC,oBAAbD,EAA2BA,EAAS5E,KAAO4E,EAC/DH,KAAKC,kBAAkBG,KAC1BJ,KAAKC,kBAAkBG,GAAc,IAEvC,IAAIhC,EAAW4B,KAAKC,kBAAkBG,GACtChC,EAASA,EAASrB,QAAUwB,IAZhC,6BAeS8B,EAAY1B,GACjB,OAAOqB,KAAKM,qBAAqB3B,GAAQN,QAAO,SAACzC,EAAO2C,GAAR,OAC5CA,EAAQ3C,EAAO+C,KAAS0B,KAjBhC,2CAoBuB1B,GACnB,IAAIG,EAAOH,EAAOG,KACdV,EAAW4B,KAAKC,kBAAkBnB,GACtC,OAAIV,IAGFmC,QAAQC,IAAR,+BAAoC1B,IAC7B,QA3Bb,MAkCaxD,EAAM,SAAC6E,EAAU5B,GAC5BwB,EAAWzE,IAAI6E,EAAU5B,ICrBpB,IA2BMkC,EAAiC,SAAA7E,KAIjC8E,EAAkB,SAAA9E,GAC7B,IHnBmB+E,EGmBfC,EAAc,sBACbhF,EAAMiF,YADO,YAEbjF,EAAMkF,SAFO,YAGblF,EAAMM,QAGP6E,EAAanF,EAAMT,QAAQ4B,QHzBZ4D,EG2BbC,EAAe7D,OH3BG,SAAAG,GAAC,OAAIF,EAAO2D,EAAP3D,EAAW,SAAAgE,GAExC,OADA9D,EAAE8D,GACKA,EAAE,IAFoBhE,CAG5B,MGwB6B,SAAAiE,GAC5B,IAAIC,EAAcD,EAAQF,EACtBrF,EAASE,EAAMT,QAAQ+F,GACvBC,EAAI,aACNC,GAAIH,GACD5D,EAAWO,YAAYgD,IAG5BlF,EAAO2F,MAAP,sBAAmB3F,EAAO2F,OAA1B,CAAiCF,QAIxBG,EAAgB,SAAA1F,GAC3BA,EAAM2F,UAAY,CAChBC,UAAWnE,EAAWa,OAAOtC,EAAMiF,YACnCY,OAAQpE,EAAWa,OAAOtC,EAAMkF,SAChC1F,KAAMiC,EAAWa,OAAOtC,EAAMM,SAIrBwF,EAAmB,SAAC9F,EAAOF,EAAQ8D,GAC9CmC,EAAiB/F,EAAOF,EAAOH,MAC/B,IAAIqG,EJrBuB,SAAChG,EAAO4D,GAAR,OAAqB5D,EAAMM,MAAMT,MAAK,SAAAL,GAAI,OAAIA,EAAKG,OAASiE,KIqBzEqC,CAAcjG,EAAO4D,GACnCoC,EAAQvG,YAAYuG,EAAQvG,YAAY0B,QAAUrB,EAAOH,MAU9CoG,EAAmB,SAAC/F,EAAOkG,GACtClG,EAAMM,MAAM6F,SAAQ,SAAA3G,GAClBA,EAAKC,YAAcgC,EAAWG,UAAUpC,EAAKC,YAAayG,OCoCxDE,EAAY,SAACpG,EAAO+C,GAAR,OAAmBR,EAAUvC,EAC7C4C,GAAiB,SAAA5C,GAAK,OD3GC,SAACA,EAAO+C,GAC/B,IAAIsD,EJhBgC,SAACpB,EAAY1F,GACjD,IAAI+G,EAFiC,SAAC/G,GAAD,OAAaA,EAAQG,KAAI,SAAAI,GAAM,OAAIA,EAAO8F,UAAUjG,QAE9D4G,CAAwBhH,GACnD,OAAO0F,EAAWnD,QAAO,SAAA8D,GAAS,OAAKU,EAAqB9F,SAASoF,EAAUjG,SIcrD6G,CAAuBxG,EAAMiF,WAAYjF,EAAMT,SACzE,GAAgC,GAA5B8G,EAAoBI,KAEtB,OADAlD,MAAM,iCACCvD,EAGT,IAAI4F,EAAYnE,EAAWa,OAAO+D,GAC9Bf,EAActF,EAAMT,QAAQ4B,OAC5BrB,EAAM,2BACLiD,EAAOjD,QADF,IAER0F,GAAIF,EACJ3F,KAAMK,EAAMsD,cAAc3D,MAAQiG,EAAUjG,KAC5CiG,UAAWA,EACXc,MAAOd,EAAUc,MACjBjB,MAAO,KAETzF,EAAMT,QAAQS,EAAMT,QAAQ4B,QAAUrB,EACtCgG,EAAiB9F,EAAOF,EAAQ,QAChCE,EAAMsD,cAAc3D,KAAO,GCwFDgH,CAAiB3G,EAAO+C,QAkCpDrD,EAAI,QA/BS,SAAAM,GAAK,OAAIA,KAgCtBN,EAAI,aA9Bc,SAAAM,GAAK,OAAIuC,EAAUvC,GACnC,SAAAA,GAAK,kCACAA,GADA,IAEHY,UAAU,EACVgG,SAAS,MAEXC,EACAjE,EAAiB8C,GACjB9C,EAAiBkC,GACjBlC,EAAiBiC,OAsBnBnF,EAAI,yBAP0B,SAAAM,GAAK,kCAC9BA,GAD8B,IAEjC6D,wBAAwB,OAM1BnE,EAAI,oBA/CqB,SAACM,EAAO+C,GAC/B,OAAO,2BACF/C,GADL,IAEEsD,cAAe,CACb3D,KAAMoD,EAAOpD,WA4CnBD,EAAI,iBAAkB0G,GACtB1G,EAAI,oBAAqB0G,GACzB1G,EAAI,kBAvBe,SAACM,EAAO+C,GAAR,OAAmBR,EAAUvC,EAC9C4C,GAAiB,SAAA5C,GAAK,ODhEe,SAACA,EAAO4D,GAC7C,IAAIzD,EAAoBJ,EAAqBC,GACzCG,GACF2F,EAAiB9F,EAAOG,EAAmByD,GC6DnBkD,CAAwB9G,EAAO+C,EAAOa,iBAuBlElE,EAAI,kBApBmB,SAAAM,GAAK,OAAIuC,EAAUvC,GACxC,SAACA,GAAD,mBAAC,eACKA,GADN,IAEGC,uBAAwBgB,EAAuBjB,OAEjD+G,MAoBH,IAAMF,EAA8B,SAAA7G,GAAK,kCACpCA,GADoC,IAEvCC,wBAAyB,KAGrB8G,EAAgC,SAAA/G,GAAK,kCACtCA,GADsC,IAEzCgH,OAAQ,CACNC,QAAQ,GAAD,OAAK/G,EAAyBF,GAA9B,YACPkH,UAAW,WAIFC,EFnJN,WAA2D,IAA1CnH,EAAyC,uDAAjCmE,EAAWG,aAAcvB,EAAQ,uCAC/D,OAAOoB,EAAW1B,OAAOzC,EAAO+C,I,iCG9B5BqE,E,MAASC,GAAG,yBACZC,EAAqBC,IAAyBH,EAAQ,WAEtDI,GAAqBC,0BAAgBC,IAAiBJ,GACtDK,GAAQC,sBAAYT,EDAE,CAC1BvG,UAAU,EACVoG,OAAQ,CACNC,QAAS,MAEXpD,wBAAwB,EACxB5D,wBAAyB,EACzBY,yBAAyB,EACzBgH,uCAAwC,KACxCC,oBAAqB,GACrBC,gBAAiB,GACjBzE,cAAe,CACb3D,KAAM,IAERJ,QAAS,GACToG,UAAW,KACXV,WAAY,CACV,CACEtF,KAAM,gBACN+G,MAAO,QAET,CACE/G,KAAM,YACN+G,MAAO,SAET,CACE/G,KAAM,kBACN+G,MAAO,UAET,CACE/G,KAAM,iBACN+G,MAAO,QAET,CACE/G,KAAM,eACN+G,MAAO,aAET,CACE/G,KAAM,aACN+G,MAAO,UAGXxB,QAAS,CACP,CACEvF,KAAM,eAER,CACEA,KAAM,UAER,CACEA,KAAM,aAER,CACEA,KAAM,YAER,CACEA,KAAM,QAER,CACEA,KAAM,WAGVW,MAAO,CACL,CACEX,KAAM,UACNF,YAAa,GACbuI,iBAAiB,GAEnB,CACErI,KAAM,WACNF,YAAa,IAEf,CACEE,KAAM,eACNF,YAAa,IAEf,CACEE,KAAM,gBACNF,YAAa,IAEf,CACEE,KAAM,UACNF,YAAa,IAEf,CACEE,KAAM,QACNF,YAAa,IAEf,CACEE,KAAM,OACNF,YAAa,IAEf,CACEE,KAAM,SACNF,YAAa,IAEf,CACEE,KAAM,cACNF,YAAa,MClGkCwI,8BAAoBT,KAEzEG,GAAMvE,SJTqB,CACzBF,KAAM,SIUOyE,UCNAO,I,MAAAA,aAJS,SAAAlI,GAAK,MAAK,CAChCgH,OAAQhH,EAAMgH,UAGDkB,EARA,SAAC,GAAD,IAAElB,EAAF,EAAEA,OAAF,OACO,MAAlBA,EAAOC,QAAkB,SAAW,qBAAKzB,GAAG,SAAS0B,UAAWF,EAAOE,UAAnC,SAA+CF,EAAOC,cCyC/EiB,gBAJS,SAAAlI,GAAK,MAAK,CAChCsD,cAAetD,EAAMsD,iBAKnB,CACEL,mBACAE,iBACAK,oBACAC,aANSyE,EApCA,SAAC,GAAD,IACX5E,EADW,EACXA,cACAL,EAFW,EAEXA,iBACAE,EAHW,EAGXA,eACAK,EAJW,EAIXA,kBACAC,EALW,EAKXA,UALW,OAOb,sBAAKyD,UAAU,SAAf,UACE,qBAAKA,UAAU,QAAf,kBACA,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,YAAf,UACE,uBAAO1B,GAAG,aACH2C,YAAY,cACZ5G,MAAO+B,EAAc3D,KACrByI,QAAS,SAAAC,GACQ,UAAXA,EAAEC,MACJnF,KAGJoF,SAAU,SAACF,GACTpF,EAAiBoF,EAAEG,OAAOjH,UAEnC,wBAAQiE,GAAG,iBAAiBiD,QAAS,kBAAMtF,KAA3C,8BACA,wBAAQqC,GAAG,oBAAoBiD,QAAS,kBAAMjF,KAA9C,oCAdJ,IAiBE,wBAAQgC,GAAG,cAAciD,QAAS,kBAAMhF,KAAxC,uBAEF,cAAC,GAAD,UC7BEiF,GAAqB,SAAC3H,EAAY4H,EAAeC,GACrD,OAAI7H,GAAc6H,EACT,gBACED,GAAiBC,EACnB,gBAEA,IAgCIV,gBANS,SAAClI,EAAO6I,GAAR,mBAAC,eACpBA,GADmB,IAEtBD,UAAW5I,EAAMY,SACjB+H,cAAevI,EAAoBJ,EAAO6I,EAAS/I,YAGb,GAAzBoI,EA5BA,SAAC,GAAD,IACbU,EADa,EACbA,UACA9I,EAFa,EAEbA,OACA6I,EAHa,EAGbA,cAHa,OAKX,qBAAKzB,UAAS,iBAAYwB,GAAmB3H,EAAY4H,EAAeC,IAAxE,SACE,gCACE,qBAAK1B,UAAU,iBAAf,SACE,qBAAK4B,IAAG,2BAAsBhJ,EAAO4G,MAA7B,YAEV,sBAAKQ,UAAU,gBAAf,UACE,sBAAMA,UAAU,aAAhB,SAA8BpH,EAAOH,OACrC,sBAAMuH,UAAU,SAAhB,SAEIyB,EAAgB,WAAa,gBCO5BT,gBANS,SAAClI,EAAO6I,GAAR,MAAsB,CAC5CrJ,KAAMqJ,EAASrJ,KACfD,QAASS,EAAMT,QACfwJ,kCAAmCtI,EAAoCT,EAAO6I,EAASrJ,SAKrF,CACEmE,kBAHSuE,EA5BF,SAAC,GAAD,IACX1I,EADW,EACXA,KACAD,EAFW,EAEXA,QACAwJ,EAHW,EAGXA,kCACApF,EAJW,EAIXA,eAJW,OAMX,sBAAKuD,UAAU,OAAOuB,QAAS,WACzBM,GACFpF,EAAenE,EAAKG,OAFxB,UAKE,8BACE,qBAAKuH,UAAU,WAAf,SAA2B1H,EAAKG,SAElC,qBAAKuH,UAAU,UAAf,SAEQ5H,EAAiBC,EAASC,GAAME,KAAI,SAAAI,GAAM,OAAI,cAAC,GAAD,CAA0BA,OAAQA,GAArBA,EAAOH,iBCb/DuI,gBAJS,SAAAlI,GAAK,MAAK,CAC9BM,MAAON,EAAMM,SAGF4H,EAVD,SAAC,GAAD,IAAG5H,EAAH,EAAGA,MAAH,OACV,8BACIA,EAAMZ,KAAI,SAAAF,GAAI,OAAI,cAAC,GAAD,CAAsBA,KAAMA,GAAjBA,EAAKG,cCe3BuI,gBALS,SAAClI,EAAO6I,GAAR,MAAsB,CAC5CtD,KAAMsD,EAAStD,KACfzF,OAAQ+I,EAAS/I,UAGJoI,EAlBF,SAAC,GAAD,IACX3C,EADW,EACXA,KADW,EAEXzF,OAFW,OAIX,qBAAKoH,UAAU,OAAf,SACE,8BAEI3B,EAAK5F,YCUEuI,gBAJS,SAAClI,EAAO6I,GAAR,MAAsB,CAC5C/I,OAAQ+I,EAAS/I,UAGJoI,EAhBD,SAAC,GAAD,IACZpI,EADY,EACZA,OADY,OAGZ,qBAAKoH,UAAU,QAAf,SACE,8BAEIpH,EAAO2F,MAAM/F,KAAI,SAAA6F,GAAI,OAAI,cAAC,GAAD,CAA8BA,KAAMA,GAApC,eAAmBA,EAAKC,eCU1C0C,gBAJS,SAAClI,EAAO6I,GAAR,MAAsB,CAC5C/I,OAAQE,EAAMT,QAAQS,EAAMC,2BAGfiI,EAhBA,SAAC,GAAD,IACbpI,EADa,EACbA,OADa,OAGb,qBAAKoH,UAAU,SAAf,SACE,8BAEc,MAAVpH,GAAkBA,EAAOgB,MAAQ,cAAC,GAAD,CAAkChB,OAAQA,GAA1C,gBAAqBA,EAAO0F,KAA0B,YCKhFwD,OAVf,WACE,OACI,sBAAK9B,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QCMF+B,GAAcC,SAASC,eAAe,QAC5CC,IAASC,OACL,cAAC,IAAD,CAAU1B,MAAOA,GAAjB,SACI,cAAC,GAAD,MAEJsB,IAGJ,IAAMK,GAAQ,CACZ,kBAAMrG,EAAiB,YACvB,kBAAME,KACN,kBAAMF,EAAiB,UACvB,kBAAME,KACN,iBdDsC,CACtCD,KAAM,oBACNpD,OAAQ,CACNgB,OAAO,KcDT,iBdFsC,CACtCoC,KAAM,oBACNpD,OAAQ,CACNgB,OAAO,KcAT,kBAAM2C,KACN,iBdW0C,CAC1CP,KAAM,0BcXN,kBAAMS,EAAe,YACrB,kBAAMA,EAAe,aAEnB4F,GAAmB,EAUnBC,GAAaC,aAAY,kBAR3B9E,QAAQC,IAAI0E,GAAMC,KAClB5B,GAAMvE,SAASkG,GAAMC,cACrBA,KACyBD,GAAMnI,QAC7BuI,cAAcF,OAI4B,O","file":"static/js/main.18dc2307.chunk.js","sourcesContent":["/************************************************\n * Selectors\n ************************************************/\nexport const getPlayerCharacterNames = (players) => players.map(player => player.character.name)\nexport const getAvailableCharacters = (characters, players) => {\n  let playerCharacterNames = getPlayerCharacterNames(players)\n  return characters.filter(character => !playerCharacterNames.includes(character.name))\n}\nexport const getPlayersInRoom = (players, room) => room.playerNames.map(name => getPlayerByName(players, name))\nexport const getPlayerByName = (players, name) => players.find(player => player.name === name)\nexport const getCurrentTurnPlayer = (state) => state.players[state.currentTurnPlayerIndex]\nexport const getCurrentTurnPlayerName = (state) => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state)\n  if (currentTurnPlayer) {\n    return currentTurnPlayer.name\n  } else {\n    return null;\n  }\n}\nexport const isCurrentTurnPlayer = (state, player) => getCurrentTurnPlayerName(state) === player.name\nexport const getRoomForPlayer = (state, player) => {\n  return state.rooms.find(room => isPlayerInRoom(room, player))\n}\nexport const isPlayerInRoom = (room, player) => room.playerNames.includes(player.name)\nexport const isCurrentTurnPlayerInRoom = (state, room) => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state)\n  if (currentTurnPlayer) {\n    let currentTurnPlayerRoom = getRoomForPlayer(state, currentTurnPlayer)\n    return currentTurnPlayerRoom && currentTurnPlayerRoom.name === room.name\n  } else {\n    return false\n  }\n}\nexport const isCurrentTurnPlayerAbleToSelectRoom = (state, room) => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state);\n  return currentTurnPlayer &&\n      !isCurrentTurnPlayerInRoom(state, room) &&\n      !state.gameOver &&\n      !state.emergencyMeetingStarted &&\n      currentTurnPlayer.human\n}\nexport const isEmergencyButtonEnabled = state => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state);\n  if (currentTurnPlayer) {\n    let room = getRoomForPlayer(state, currentTurnPlayer)\n    return currentTurnPlayer &&\n        currentTurnPlayer.human &&\n        !state.gameOver &&\n        room.emergencyButton\n  } else {\n    return false\n  }\n}\nexport const isImposter = (state, player) => state.imposterPlayerName === player.name\nexport const isOnlyPlayerInRoom = (room, player) => room.playerNames.length === 1 && room.playerNames[0] === player.name\nexport const getRoomByName = (state, roomName) => state.rooms.find(room => room.name === roomName)\nexport const getNextPlayerTurnIndex = (state) => {\n  let nextIndex = state.currentTurnPlayerIndex + 1\n  if (state.players.length === nextIndex) {\n    return 0;\n  } else {\n    return nextIndex;\n  }\n}\n\nexport const isEmergencyMeetingFinished = state => {\n  if (!state.emergencyMeetingStarted) {\n    return\n  }\n  let lastVotingPlayerIndex = state.emergencyMeetingInitiatedByPlayerIndex - 1\n  if (lastVotingPlayerIndex < 0) {\n    lastVotingPlayerIndex = state.players.length - 1\n  }\n  return state.currentTurnPlayerIndex === lastVotingPlayerIndex\n}\n\nconst sortByVote = (a, b) => a[1] > b[1] ? -1 : 1\n\nexport const getEmergencyMeetingVoteResults = state => {\n  const sortedTallies = Object.entries(state.voteTalliesByPlayer).sort(sortByVote)\n  const mostVotedPlayerTally = sortedTallies[0]\n  const secondMostVotedPlayerTally = sortedTallies[1]\n\n  const mostVoted = {\n    playerName: mostVotedPlayerTally[0],\n    votes: mostVotedPlayerTally[1]\n  }\n\n  const secondMostVoted = {\n    playerName: secondMostVotedPlayerTally[0],\n    votes: secondMostVotedPlayerTally[1]\n  }\n\n  const buildResult = results => ({\n    mostVoted,\n    secondMostVoted,\n    results\n  })\n\n  if (mostVoted.votes === secondMostVoted.votes) {\n    return buildResult({\n      victory: false,\n      tie: true\n    })\n  } else if (mostVoted.playerName === state.imposterPlayerName) {\n    return buildResult({\n      victory: true\n    })\n  } else {\n    return buildResult({\n      victory: false\n    })\n  }\n}\n","import produce from \"immer\";\n\n/**\n * Example usage:\n * let random = () => Math.round(Math.random() * 10)\n * let result = repeat(6) (items => [...items, random()]) ([])\n * result = [1, 5, 8, 3, 0, 2]\n *\n * @param times\n * @returns {function(*=): function(*=): (*)}\n */\nexport const repeat = times => f => value => {\n  if (times > 0) {\n    let nextValue = f(value)\n    repeat(times - 1)(f)(nextValue)\n  } else {\n    return value\n  }\n}\n\n\n/**\n * repeat n times.\n * times(10) (i => console.log(i))\n * @param n\n * @returns {function(*): *}\n */\nexport const times = n => f => repeat(n) (i => {\n  f(i)\n  return i+1\n})(0)\n\nexport const ArrayUtils = {\n  clone: function(array) {\n    return [...array];\n  },\n  allExcept: function(array, item) {\n    return array.filter(a => a !== item)\n  },\n  pluckRandom: function(array) {\n    if (array.length === 0) {\n      return null\n    }\n    return array.splice(ArrayUtils.sampleIndex(array), 1)[0];\n  },\n  sampleIndex: function(array) {\n    return Math.floor(Math.random() * array.length);\n  },\n  sample: (array) => {\n    return array[ArrayUtils.sampleIndex(array)];\n  }\n}\n\nexport const reduceAll = (state, ...reducers) => {\n  return reducers.reduce((newState, reducer) => reducer(newState), state)\n}\n\nexport const mutatorToReducer = (mutator) => (oldState, action) => produce(oldState, newState => mutator(newState, action))\n\nexport const newFromTemplate = (template) => {\n  let element = template.cloneNode(true);\n  element.classList.remove(\"hidden\");\n  element.attributes.removeNamedItem(\"id\");\n  return element;\n};\n\n","import {\n  getCurrentTurnPlayer,\n  getPlayerByName,\n} from \"../selectors/selectors\";\nimport {ArrayUtils} from \"../utils\";\n\nexport const init = () => ({\n  type: 'init'\n})\nexport const updatePlayerName = (name) => ({\n  type: 'updatePlayerName',\n  name: name\n})\n\nexport const addHumanPlayer = () => (dispatch, getState) => {\n  const state = getState()\n  if (getPlayerByName(state.players, state.addPlayerForm.name) != null) {\n    alert(`There's already a player named ${state.addPlayerForm.name}`)\n  } else {\n    dispatch({\n      type: 'addHumanPlayer',\n      player: {\n        human: true\n      }\n    })\n  }\n}\n\nexport const addComputerPlayer = () => ({\n  type: 'addComputerPlayer',\n  player: {\n    human: false\n  }\n})\nexport const nextPlayerTurn = () => ({\n  type: 'nextPlayerTurn'\n})\nexport const startGame = () => (dispatch, getState) => {\n  dispatch({\n    type: 'startGame'\n  })\n  dispatchNextTurn(dispatch, getState)\n}\nexport const enableComputerPlayers = () => ({\n  type: 'enableComputerPlayers'\n})\nexport const onRoomSelected = (roomName) => (dispatch, getState) => {\n  dispatch({\n    type: 'onRoomSelected',\n    roomName\n  })\n  dispatchNextTurn(dispatch, getState)\n}\n\n/************************************************\n * Helpers/Shared Actions\n ************************************************/\nconst dispatchNextTurn = (dispatch, getState) => {\n  dispatch(nextPlayerTurn())\n  const state = getState()\n  const player = getCurrentTurnPlayer(state)\n  if (!player.human && state.computerPlayersEnabled) {\n    doComputerPlayer(dispatch, getState)\n  }\n}\n\nconst doComputerPlayer = (dispatch, getState) => {\n  setTimeout(() => {\n    const action = ArrayUtils.sample(getAvailableComputerActions(getState))\n    dispatch(action)\n  }, 200)\n}\n\nconst getAvailableComputerActions = (getState) => {\n  return computerActions\n}\n\nconst moveToRandomRoom = (dispatch, getState) => {\n  const state = getState()\n  const randomRoom = ArrayUtils.sample(state.rooms)\n  dispatch(onRoomSelected(randomRoom.name))\n}\n\nconst computerActions = [\n  moveToRandomRoom\n]\n\n","export class ReducerMap {\n  constructor() {\n    this.actionsToReducers = {}\n    this.initialState = {}\n  }\n\n  map(actionFn, reducer) {\n    let actionName = (typeof actionFn === 'function') ? actionFn.name : actionFn\n    if (!this.actionsToReducers[actionName]) {\n      this.actionsToReducers[actionName] = [];\n    }\n    let reducers = this.actionsToReducers[actionName];\n    reducers[reducers.length] = reducer;\n  }\n\n  reduce(startState, action) {\n    return this.getReducersForAction(action).reduce((state, reducer) =>\n        reducer(state, action), startState);\n  }\n\n  getReducersForAction(action) {\n    let type = action.type;\n    let reducers = this.actionsToReducers[type];\n    if (reducers) {\n      return reducers;\n    } else {\n      console.log(`No reducer found for ${type}`)\n      return [];\n    }\n  }\n}\n\nconst reducerMap = new ReducerMap();\n\nexport const map = (actionFn, reducer) => {\n  reducerMap.map(actionFn, reducer);\n}\n\nexport function reducer(state = reducerMap.initialState, action) {\n  return reducerMap.reduce(state, action);\n}\n\n","import {\n  ArrayUtils,\n  repeat,\n  mutatorToReducer, times\n} from \"../utils\";\nimport {\n  getAvailableCharacters,\n  getCurrentTurnPlayer,\n  getRoomByName,\n} from \"../selectors/selectors\";\n\n/************************************************\n * Mutators\n ************************************************/\nexport const resetGame = state => {\n  state.gameOver = false\n  state.victory = false\n}\n\nexport const addPlayer = (state, action) => {\n  let availableCharacters = getAvailableCharacters(state.characters, state.players)\n  if (availableCharacters.size == 0) {\n    alert(\"No more characters available!\")\n    return state;\n  }\n\n  let character = ArrayUtils.sample(availableCharacters)\n  let playerIndex = state.players.length\n  let player = {\n    ...action.player,\n    id: playerIndex,\n    name: state.addPlayerForm.name || character.name,\n    character: character,\n    image: character.image,\n    cards: []\n  }\n  state.players[state.players.length] = player\n  movePlayerToRoom(state, player, \"Hall\")\n  state.addPlayerForm.name = \"\"\n}\n\nexport const movePlayersToStartingPositions = state => {\n  //state.rooms.forEach(room => room.playerNames = []);\n}\n\nexport const distributeCards = state => {\n  let availableCards = [\n    ...state.characters,\n    ...state.weapons,\n    ...state.rooms\n  ]\n\n  let numPlayers = state.players.length\n\n  times(availableCards.length) (index => {\n    let playerIndex = index % numPlayers\n    let player = state.players[playerIndex]\n    let card = {\n      id: index,\n      ...ArrayUtils.pluckRandom(availableCards)\n    }\n\n    player.cards = [...player.cards, card]\n  })\n}\n\nexport const pickWhoDunnit = state => {\n  state.whoDunnit = {\n    character: ArrayUtils.sample(state.characters),\n    weapon: ArrayUtils.sample(state.weapons),\n    room: ArrayUtils.sample(state.rooms)\n  }\n}\n\nexport const movePlayerToRoom = (state, player, roomName) => {\n  leaveCurrentRoom(state, player.name)\n  let newRoom = getRoomByName(state, roomName);\n  newRoom.playerNames[newRoom.playerNames.length] = player.name\n}\n\nexport const moveCurrentPlayerToRoom = (state, roomName) => {\n  let currentTurnPlayer = getCurrentTurnPlayer(state)\n  if (currentTurnPlayer) {\n    movePlayerToRoom(state, currentTurnPlayer, roomName)\n  }\n}\n\nexport const leaveCurrentRoom = (state, playerNameToRemove) => {\n  state.rooms.forEach(room => {\n    room.playerNames = ArrayUtils.allExcept(room.playerNames, playerNameToRemove);\n  })\n}\n","import * as actions from \"./actions\"\nimport { map, reducer } from \"./utils/redux-map\";\nimport { mutatorToReducer, ArrayUtils, reduceAll } from \"../utils\";\nimport {\n  addPlayer as addPlayerMutator, distributeCards,\n  moveCurrentPlayerToRoom,\n  movePlayersToStartingPositions, pickWhoDunnit,\n} from \"./mutators\"\nimport {\n  getCurrentTurnPlayerName,\n  getNextPlayerTurnIndex\n} from \"../selectors/selectors\"\n\nexport const initialState = {\n  gameOver: false,\n  notify: {\n    message: null\n  },\n  computerPlayersEnabled: false,\n  currentTurnPlayerIndex: -1,\n  emergencyMeetingStarted: false,\n  emergencyMeetingInitiatedByPlayerIndex: null,\n  voteTalliesByPlayer: {},\n  computerPlayers: [],\n  addPlayerForm: {\n    name: \"\",\n  },\n  players: [],\n  whoDunnit: null,\n  characters: [\n    {\n      name: \"Miss Scarlett\",\n      image: \"pink\"\n    },\n    {\n      name: \"Mr. Green\",\n      image: \"green\"\n    },\n    {\n      name: \"Colonel Mustard\",\n      image: \"orange\"\n    },\n    {\n      name: \"Professor Plum\",\n      image: \"blue\"\n    },\n    {\n      name: \"Mrs. Peacock\",\n      image: \"lightblue\"\n    },\n    {\n      name: \"Mrs. White\",\n      image: \"white\"\n    }\n  ],\n  weapons: [\n    {\n      name: \"Candlestick\"\n    },\n    {\n      name: \"Dagger\"\n    },\n    {\n      name: \"Lead Pipe\"\n    },\n    {\n      name: \"Revolver\"\n    },\n    {\n      name: \"Rope\"\n    },\n    {\n      name: \"Wrench\"\n    }\n  ],\n  rooms: [\n    {\n      name: \"Kitchen\",\n      playerNames: [],\n      emergencyButton: true\n    },\n    {\n      name: \"Ballroom\",\n      playerNames: [],\n    },\n    {\n      name: \"Conservatory\",\n      playerNames: [],\n    },\n    {\n      name: \"Billiard Room\",\n      playerNames: [],\n    },\n    {\n      name: \"Library\",\n      playerNames: [],\n    },\n    {\n      name: \"Study\",\n      playerNames: [],\n    },\n    {\n      name: \"Hall\",\n      playerNames: [],\n    },\n    {\n      name: \"Lounge\",\n      playerNames: [],\n    },\n    {\n      name: \"Dining Room\",\n      playerNames: [],\n    },\n  ]\n}\n\nconst updatePlayerName = (state, action) => {\n  return {\n    ...state,\n    addPlayerForm: {\n      name: action.name\n    }\n  }\n}\n\nconst addPlayer = (state, action) => reduceAll(state,\n  mutatorToReducer(state => addPlayerMutator(state, action))\n)\n\nconst init = state => state\n\nconst startGame = state => reduceAll(state,\n  state => ({\n    ...state,\n    gameOver: false,\n    victory: false\n  }),\n  resetCurrentTurnPlayerIndex,\n  mutatorToReducer(pickWhoDunnit),\n  mutatorToReducer(distributeCards),\n  mutatorToReducer(movePlayersToStartingPositions),\n)\n\nconst selectRoom = (state, action) => reduceAll(state,\n  mutatorToReducer(state => moveCurrentPlayerToRoom(state, action.roomName)),\n)\n\nconst nextPlayerTurn = state => reduceAll(state,\n  (state) => ({\n     ...state,\n     currentTurnPlayerIndex: getNextPlayerTurnIndex(state)\n   }),\n   showCurrentPlayerNotification\n)\n\nconst enableComputerPlayers = state => ({\n  ...state,\n  computerPlayersEnabled: true,\n})\n\nmap('init', init)\nmap('startGame', startGame)\nmap('enableComputerPlayers', enableComputerPlayers)\nmap('updatePlayerName', updatePlayerName)\nmap('addHumanPlayer', addPlayer)\nmap('addComputerPlayer', addPlayer)\nmap('onRoomSelected', selectRoom)\nmap('nextPlayerTurn', nextPlayerTurn)\n\n/************************************************\n * Other Reducers, Helpers, and Shared Reducer Methods\n ************************************************/\nconst resetCurrentTurnPlayerIndex = state => ({\n  ...state,\n  currentTurnPlayerIndex: -1\n})\n\nconst showCurrentPlayerNotification = state => ({\n  ...state,\n  notify: {\n    message: `${getCurrentTurnPlayerName(state)}'s turn!`,\n    className: \"turn\"\n  }\n});\n\nexport const rootReducer = reducer\n","import { applyMiddleware, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { rootReducer, initialState } from \"./reducers\";\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSocketIoMiddleware from 'redux-socket.io';\nimport io from 'socket.io-client';\n\nimport { init } from \"./actions\"\n\nconst socket = io('http://localhost:3000');\nconst socketIoMiddleware = createSocketIoMiddleware(socket, \"server/\");\n\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware, socketIoMiddleware)\nconst store = createStore(rootReducer, initialState, composeWithDevTools(middlewareEnhancer))\n\nstore.dispatch(init());\n\nexport default store\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst Notify = ({notify}) => (\n    notify.message == null ? \"<div/>\" : <div id=\"notify\" className={notify.className}>{notify.message}</div>\n);\n\nconst mapStateToProps = state => ({\n  notify: state.notify\n})\n\nexport default connect(mapStateToProps)(Notify);\n\n","import { connect } from \"react-redux\";\nimport Notify from \"./Notify\"\nimport {\n  updatePlayerName,\n  addHumanPlayer,\n  addComputerPlayer,\n  startGame\n} from \"../redux/actions\"\n\nconst Header = ({\n    addPlayerForm,\n    updatePlayerName,\n    addHumanPlayer,\n    addComputerPlayer,\n    startGame\n}) => (\n  <div className=\"header\">\n    <div className=\"title\">CLUE</div>\n    <div className=\"gameControls\">\n      <div className=\"addPlayer\">\n        <input id=\"playerName\"\n               placeholder=\"Player Name\"\n               value={addPlayerForm.name}\n               onKeyUp={e => {\n                 if (e.code === 'Enter') {\n                   addHumanPlayer()\n                 }\n               }}\n               onChange={(e) => {\n                 updatePlayerName(e.target.value);\n               }}/>\n        <button id=\"addHumanPlayer\" onClick={() => addHumanPlayer()}>Add Human Player</button>\n        <button id=\"addComputerPlayer\" onClick={() => addComputerPlayer()}>Add Computer Player</button>\n      </div>\n      |\n      <button id=\"startButton\" onClick={() => startGame()}>Start!</button>\n    </div>\n    <Notify/>\n  </div>\n)\n\nconst mapStateToProps = state => ({\n  addPlayerForm: state.addPlayerForm\n})\n\nexport default connect(\n    mapStateToProps,\n    {\n      updatePlayerName,\n      addHumanPlayer,\n      addComputerPlayer,\n      startGame,\n    }\n)(Header);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  isCurrentTurnPlayer, isImposter,\n} from \"../selectors/selectors\"\nimport {\n} from \"../redux/actions\";\n\nconst getPlayerClassName = (isImposter, isCurrentTurn, celebrate) => {\n  if (isImposter && celebrate) {\n    return \"playerEjected\"\n  } else if (isCurrentTurn || celebrate) {\n    return \"turnHighlight\"\n  } else {\n    return \"\"\n  }\n}\n\nconst Player = ({\n  celebrate,\n  player,\n  isCurrentTurn,\n}) => (\n    <div className={`player ${getPlayerClassName(isImposter, isCurrentTurn, celebrate)}`}>\n      <div>\n        <div className=\"imageContainer\">\n          <img src={`character-images/${player.image}.png`}/>\n        </div>\n        <div className=\"playerContent\">\n          <span className=\"playerName\">{player.name}</span>\n          <span className=\"status\">\n            {\n              isCurrentTurn ? \"'s turn!\" : \"\"\n            }\n          </span>\n        </div>\n      </div>\n    </div>\n);\n\nconst mapStateToProps = (state, ownProps) => ({\n  ...ownProps,\n  celebrate: state.gameOver,\n  isCurrentTurn: isCurrentTurnPlayer(state, ownProps.player),\n})\n\nexport default connect(mapStateToProps, {\n\n})(Player);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport Player from \"./Player\";\nimport {\n  getPlayersInRoom,\n  isCurrentTurnPlayerAbleToSelectRoom,\n} from \"../selectors/selectors\"\nimport {\n  onRoomSelected,\n} from \"../redux/actions\";\n\nconst Room = ({\n  room,\n  players,\n  currentTurnPlayerAbleToSelectRoom,\n  onRoomSelected\n}) => (\n  <div className=\"room\" onClick={() => {\n    if (currentTurnPlayerAbleToSelectRoom) {\n      onRoomSelected(room.name)\n    }\n  }}>\n    <div>\n      <div className=\"roomName\">{room.name}</div>\n    </div>\n    <div className=\"players\">\n        {\n            getPlayersInRoom(players, room).map(player => <Player key={player.name} player={player}/>)\n        }\n    </div>\n  </div>\n)\n\nconst mapStateToProps = (state, ownProps) => ({\n  room: ownProps.room,\n  players: state.players,\n  currentTurnPlayerAbleToSelectRoom: isCurrentTurnPlayerAbleToSelectRoom(state, ownProps.room),\n})\n\nexport default connect(\n    mapStateToProps,\n    {\n      onRoomSelected,\n    }\n)(Room);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport Room from \"./Room\"\n\nconst Rooms = ({ rooms }) => (\n    <div>\n      { rooms.map(room => <Room key={room.name} room={room}/>) }\n    </div>\n)\n\nconst mapStateToProps = state => ({\n    rooms: state.rooms\n})\n\nexport default connect(mapStateToProps)(Rooms);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\n\nconst Card = ({\n  card,\n  player,\n}) => (\n  <div className=\"card\">\n    <div>\n      {\n        card.name\n      }\n    </div>\n  </div>\n)\n\nconst mapStateToProps = (state, ownProps) => ({\n  card: ownProps.card,\n  player: ownProps.player,\n})\n\nexport default connect(\n    mapStateToProps,\n)(Card);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport Card from \"./Card\";\n\nconst Cards = ({\n  player,\n}) => (\n  <div className=\"cards\">\n    <div>\n      {\n        player.cards.map(card => <Card key={`card_${card.id}`} card={card}/>)\n      }\n    </div>\n  </div>\n)\n\nconst mapStateToProps = (state, ownProps) => ({\n  player: ownProps.player,\n})\n\nexport default connect(\n    mapStateToProps,\n)(Cards);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport Cards from \"./Cards\";\n\nconst Footer = ({\n  player,\n}) => (\n  <div className=\"footer\">\n    <div>\n      {\n        player != null && player.human ? <Cards key={`cards_${player.id}`} player={player}/> : null\n      }\n    </div>\n  </div>\n)\n\nconst mapStateToProps = (state, ownProps) => ({\n  player: state.players[state.currentTurnPlayerIndex]\n})\n\nexport default connect(\n    mapStateToProps,\n)(Footer);\n","import '../styles.css'\nimport Header from \"./Header\"\nimport Rooms from \"./Rooms\"\nimport Footer from \"./Footer\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Header/>\n        <Rooms/>\n        <Footer/>\n      </div>\n  );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport App from './components/App'\n\nimport {\n  addComputerPlayer,\n  addHumanPlayer,\n  enableComputerPlayers,\n  onRoomSelected,\n  startGame,\n  updatePlayerName,\n} from \"./redux/actions\";\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    rootElement\n)\n\nconst steps = [\n  () => updatePlayerName(\"Jackson\"),\n  () => addHumanPlayer(),\n  () => updatePlayerName(\"Daddy\"),\n  () => addHumanPlayer(),\n  () => addComputerPlayer(),\n  () => addComputerPlayer(),\n  () => startGame(),\n  () => enableComputerPlayers(),\n  () => onRoomSelected(\"Kitchen\"), // Jackson\n  () => onRoomSelected(\"Library\"), // Daddy\n]\nlet currentStepIndex = 0;\nlet runStep = () => {\n  console.log(steps[currentStepIndex])\n  store.dispatch(steps[currentStepIndex]());\n  currentStepIndex++;\n  if (currentStepIndex === steps.length) {\n    clearInterval(intervalId);\n  }\n}\n\nlet intervalId = setInterval(() => runStep(), 100)\n\n\n\n"],"sourceRoot":""}